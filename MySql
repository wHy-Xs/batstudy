一.数据库基本操作
运行MySql并存储数据的机器叫MySql Server.
登陆数据库：mysql -h hostname -u username -ppassword databasename
数据库退出：quit 或 exit 或crtl+d
创建数据库：create database databasename
使用数据库：use datbasename
创建一个表：create table tablename();
显示表：show tables;
显示表结构：desc tablename
删除表\数据库：drop table\database tbname\dbname;
###################################################################################
增
load data指令：LOAD DATA LOCAL INFILE '/path/pet.txt' INTO TABLE pet;
insert into tablename(col_name) values(str)
insert into tablename set col_name="context"
insert into tbl_name1(col1,col2) select col3,col4 from tbl_name2;
注意：INSERT INTO ... SELECT语句满足下列条件：
  1. 查询不能包含一个ORDER BY子句。
  2. INSERT语句的目的表不能出现在SELECT查询部分的FROM子句，因为这在ANSI SQL中被禁止让从你正在插入的表中SELECT。
  （问题是SELECT将可能发现在同一个运行期间内先前被插入的记录。当使用子选择子句时，情况能很容易混淆）
##################################################################################
删
DELETE FROM tbl_name WHERE 要删除的记录 WHERE 子句指定哪些记录应该删除。
eg:delete from pet where name=”Whistler”;
#################################################################################
改
UPDATE tbl_name SET 要更改的列 WHERE 要更新的记录
eg:update pet set sex=’f’where name=” Whistler”;
#################################################################################
查
查询表全部字段：select * from tablename;
查询指定行列：select * from tablename where 字段="str" and\or 字段="str";
模糊查询指令： select *from tablename where 字段 like ×××%；注意：%是个通配符，只能用于select中，表示0或多个字符。
distinct指令去除重复字段信息：select *from tablename order by 字段名 distinct;
#################################################################################
计算：
select 1+1
#################################################################################
条件查询：
eg:SELECT name, species, birth FROM pet ORDER BY species, birth DESC;
ORDER BY column_name [ASC|DESC] [,…]
其中ASC表示升序，为默认值，DESC为降序。ORDER BY不能按text、text和image数据类型进行排序。
#################################################################################
限制查询：
limit后面有一个数字表示显示多少行数据，如果limit后面有两个数字，第一个数字表示偏移量即从哪行开始，第二个数字表示显示多少行。
eg:select *from tablename limit 1,100;
只显示100条数据： select *from tablename limit 100;
MIN()最小值，SUM()总数
MAX()返回最大值：
select max(turname) from tablename;
COUNT()计数：
select count(turname) from tablename;注意：count(数据列名称)值则只统计全体非NULL值得个数
###################################################################################
改变表结构：
###################################################################################
data_format(data_join,%m%a%y)
year()返回年
month()返回月
dayofmonth()返回天
now()返回日期和时间
current_date()返回日期
concat(字段1，字段2)连接字段
###################################################################################
二.数据类型和表类型
mysql中有三种主要的列类型：数字，字符串，日期。
在创建时尽可能选择小的列类型，这样可以节省空间，可以更快地进行访问和更新。
整数类型        字节       范围（有符号）      范围（无符号）          用途 
TINYINT        1字节        (-128，127)          (0，255)            小整数值 

SMALLINT       2字节     (-32 768，32 767)       (0，65 535)         大整数值 

MEDIUMINT      3字节    (-8 388 608，8 388 607) (0，16 777 215)      大整数值 

INT或INTEGER   4字节   (-2 147 483 648，2 147 483 647) (0，4 294 967 295) 大整数值 

BIGINT         8字节   (-9 233 372 036 854 775 808，9 223 372 036 854 775 807) (0，18 446 744 073 709 551 615) 极大整数值 

FLOAT          4字节   (-3.402 823 466 E+38，1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38) 0，(1.175 494 351 E-38，3.402 823 466 E+38) 单精度浮点数值 

DOUBLE         8字节 (1.797 693 134 862 315 7 E+308，2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308) 双精度浮点数值 

DECIMAL 对DECIMAL(M,D) ，如果M>D，为M+2否则为D+2 依赖于M和D的值 依赖于M和D的值 小数值

字符串类型     字节大小         描述及存储需求
CHAR         0-255字节          定长字符串 

VARCHAR      0-255字节          变长字符串 

TINYBLOB     0-255字节        不超过 255 个字符的二进制字符串 

TINYTEXT     0-255字节        短文本字符串 

BLOB         0-65535字节      二进制形式的长文本数据 

TEXT         0-65535字节      长文本数据 

MEDIUMBLOB   0-16 777 215字节 二进制形式的中等长度文本数据 

MEDIUMTEXT   0-16 777 215字节 中等长度文本数据 

LOGNGBLOB    0-4 294 967 295字节 二进制形式的极大文本数据 

LONGTEXT     0-4 294 967 295字节 极大文本数据

VARBINARY(M)                   允许长度0-M个字节的定长字节符串，值的长度+1个字节

BINARY(M)    M                 允许长度0-M个字节的定长字节符串

类型     大小(字节)     范围               格式          用途 
DATE       4        1000-01-01/9999-12-31 YYYY-MM-DD    日期值 

TIME       3        '-838:59:59'/'838:59:59' HH:MM:SS    时间值或持续时间 

YEAR       1         1901/2155               YYYY       年份值 

DATETIME   8       1000-01-01 00:00:00/9999-12-31 23:59:59 YYYY-MM-DD HH:MM:SS 混合日期和时间值 

TIMESTAMP  4       1970-01-01 00:00:00/2037 年某时 YYYYMMDD HHMMSS 混合日期和时间值，时间戳

############################################################################################
一个下划线就表示一个字符
数字运算，位运算，逻辑运算

连接：
内连接: [inner] join, 从左表中取出每一条记录,去右表中与所有的记录进行匹配: 匹配必须是某个条件在左表中与右表中相同最终才会保留结果,否则不保留.
    SELECT A.*, B.*  
    FROM student_info A inner join student_score B  
    ON A.student_id = B.student_id  

外连接: 以某张表为主,取出里面的所有记录, 然后每条与另外一张表进行连接: 不管能不能匹配上条件,最终都会保留: 能匹配,正确保留; 
       不能匹配,其他表的字段都置空NULL.
    SELECT A.*, B.*  
    FROM student_info A left join student_score B  
    ON A.student_id = B.student_id  
    
    外连接分为两种: 是以某张表为主: 有主表
    left join: 左外连接(左连接), 以左表为主表
    right join: 右外连接(右连接), 以右表为主表
###########################################################################
索引
索引用来快速地寻找那些具有特定值的记录
普通索引
  这是最基本的索引类型，而且它没有唯一性之类的限制。普通索引可以通过以下几种方式创建： 
  创建索引，例如CREATE INDEX <索引的名字> ON tablename (列的列表); 
  修改表，例如ALTER TABLE tablename ADD INDEX [索引的名字] (列的列表); 
  创建表的时候指定索引，例如CREATE TABLE tablename ( [...], INDEX [索引的名字] (列的列表) ); 

主键 
  主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”。如果你曾经用过AUTO_INCREMENT类型的列，你可能已经熟悉主键之类的概念了。主键一般在
  创建表的时候指定，例如“CREATE TABLE tablename ( [...], PRIMARY KEY (列的列表) ); ”。但是，我们也可以通过修改表的方式加入主键，
  例如“ALTER TABLE tablename ADD PRIMARY KEY (列的列表); ”。每个表只能有一个主键。（主键要求唯一性且没有值为NULL）

############################################################################################
1.timestampdiff(interval,datetime_expr1,datetime_expr2)
  timestampadd(interval,datetime_expr1,datetime_expr2)
    eg:select TIMESTAMPDIFF(day,'2012-08-24','2012-08-30');  结果：6
2.to_days()函数，返回天数，内容要加引号
  eg:select (to_days('2012-08-30')-to_days('2012-08-21'));
3.DATE_ADD() 函数向日期添加指定的时间间隔
  DATE_ADD(date,INTERVAL expr type) date 参数是合法的日期表达式。expr 参数是您希望添加的时间间隔,type 参数可以是下列值：year,minutes,
  second,hour,day,week等
4.DATE_SUB() 函数从日期减去指定的时间间隔。
  DATE_SUB(date,INTERVAL expr type) date 参数是合法的日期表达式。expr 参数是您希望添加的时间间隔。type 参数可以是下列值：同上
5.变量赋值
set @name = '';
select @name:=password from user limit 0,1;#从数据表中获取一条记录password字段的值给@name变量。在执行后输出到查询结果集上面。
（注意等于号前面有一个冒号，后面的limit 0,1是用来限制返回结果的，表示可以是0或1个。相当于SQL SERVER里面的top 1）
如果直接写：select @name:=password from user; 如果这个查询返回多个值的话，那@name变量的值就是最后一条记录的password字段的值 
