1.基本概念：
	工作区：就是你电脑上能看到的目录，如git文件夹
	仓库：工作区有一个隐藏的.git，这个不算工作区，而是git仓库
	仓库中很多东西，其中最重要的就是stage(暂存区)，还有Git为我们创建的第一个分支master,以及指向master的HEAD指针


2.提交步骤：第一步相当于把文件从工作区添加到仓库的暂存区，第二步提交实际就是把暂存区文件提交到当前分支	
	1.git add		
	2.git commit -m "说明"
	3.git push origin master   # 将当前分支push到远程master分支

3.分支开发的过程：
	1.创建分支git checkout -b newname，
	2.开发，
	3.合并分支git merge branchname（一般用这种方式：git merge --no-ff -m "merge with no-ff" 分支名称），
	4.删除分支git branch -d barnchname
4.图形化显示： git log --graph --pretty=oneline --abbrev-commit

5.命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	一段代码git add到暂存区，但是没有git commit之前，可以通过git reset HEAD 文件名称 这个命令把暂存区的修改撤销掉，重新放回工作区。

6.把工作现场储藏起来步骤：1.git stash 2.git stash list 3.git stash pop(恢复内容并把stash内容删除)

7.	git log       # 显示提交日志
	git log --pretty=oneline
8.版本回退：HEAD表示当前版本 HEAD^表示上一个版本 HAED^^表示上上个版本 一次类推
	1.git reset --hard HEAD^ 回退到上一个版本
	2.git reset --hard 版本号 回退到任何一个版本
	3.git reflog用来记录你的每一次命令
	
Git常用命令总结
git config 
Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。
这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：
  •	/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。
  •	~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。
  •	当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。

git clone url 该命令类似于svn checkout ，可以将远端git 仓库克隆到本地让自己能够查看该项目，或者进行修改
git add 命令可将该文件添加到缓存

git status    # 查看当前版本状态（是否修改）
git status –s 查看在你上次提交之后是否有修改。


git branch                                                # 显示本地分支
git branch -a                                             # 显示所有分支
git branch (branchname)				    	  # 创建分支命令
git branch --contains 50089                               # 显示包含提交50089的分支

git checkout (branchname): 切换分支命令, 当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容,所以多个分支不需要多个目录
git checkout newname  将分支上的内容直接弄下来
git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出
git checkout -b master master_copy                        # 上面的完整版

git remote 列出远程仓库名
git pull origin 远程分支：本地分支  将远程内容同步到本地 
git push remote-name branch-name 将本地分支推送到远程库
git fetch [remote-name] 这个命令会访问远程仓库，从中拉取所有你还没有的数据。
git branch -d/D 分支名称 删除本地分支
git push origin:分支名称 删除远程分支




git diff 
执行 git diff 来查看执行 git status 的结果的详细信息。
git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。
  •	尚未缓存的改动：git diff
  •	查看已缓存的改动： git diff --cached
  •	查看已缓存的与未缓存的所有改动：git diff HEAD
  •	显示摘要而非整个 diff：git diff --stat
git commit
使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。
Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。
$ git config --global user.name 'runoob'
$ git config --global user.email test@runoob.com
#############################################################################################
git init                                                  # 初始化本地git仓库（创建新仓库）
git config --global user.name "xxx"                       # 配置用户名
git config --global user.email "xxx@xxx.com"              # 配置邮件

git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库

git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容
git show dfb02                                            # 可只用commitid的前几位
git show HEAD                                             # 显示HEAD提交日志
git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本


git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）

git merge origin/master                                   # 合并远程master分支至当前分支
git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改

git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）
git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支
git pull origin master                                    # 获取远程分支master并merge到当前分支
git mv README README2                                     # 重命名文件README为README2
git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）
git rebase


git show-branch                                           # 图示当前分支历史
git show-branch --all                                     # 图示所有分支历史
git whatchanged                                           # 显示提交历史对应的文件修改
git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818
git ls-tree HEAD                                          # 内部命令：显示某个git对象
git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH
git reflog                                                # 显示所有提交，包括孤立节点
git show HEAD@{5}
git show master@{yesterday}                               # 显示master分支昨天的状态
git log --pretty=format:'%h %s' --graph                   # 图示提交日志
git show HEAD~3
git show -s --pretty=raw 2be7fcb476

git grep "delete from"                                    # 文件中搜索文本“delete from”
git grep -e '#define' --and -e SORT_DIRENT
git gc
git fsck
